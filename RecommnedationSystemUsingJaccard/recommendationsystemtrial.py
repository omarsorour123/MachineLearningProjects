# -*- coding: utf-8 -*-
"""RecommendationSystemTrial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GCbcbgC3SyVTS2QGazabOYpfnd5f_FPm
"""

# Import Dependencies
import pandas as pd
import numpy as np
from scipy.spatial.distance import pdist,squareform

#read_data
movies_df = pd.read_csv('movies.csv')

#explore the data
movies_df.head()

#preprocessing
expanded_data = []
for i in range(len(movies_df)):
    # Extract title without year
    title = movies_df.loc[i, 'title'].split(" (")[0]
    #split the genres
    genres = movies_df.loc[i, 'genres'].split('|')
    #doing one to many relationship see the result to understand
    for genre in genres:
        expanded_data.append({'title': title, 'genre': genre})

# Create new DataFrame with expanded rows
movies_df = pd.DataFrame(expanded_data)

#the result
movies_df

#make it as table the rows is title and columns is genres
movies_df = pd.crosstab(movies_df['title'],movies_df['genre'])

#calculate jaccard distance the result 1d array
jaccard_dist=  pdist(movies_df.values,metric='jaccard')
#make it 2d array
squared_jaccard_dist = squareform(jaccard_dist)
#convert from distance to similarity which we foucs for
jaccard_similarity = 1- squared_jaccard_dist

#the result
print(jaccard_similarity)

#make it as dataframe with title as column and row to get the relatio between two movies like
#distance_df['toy story']['jumanji']
distance_df = pd.DataFrame(jaccard_similarity,index =movies_df.index,columns=movies_df.index)

#the result
distance_df

#testing
watched_movies = ['Toy Story','Jumanji']
testing = movies_df.reindex(watched_movies)

ans=[]
for i in range(len(watched_movies)):
  ans.append(distance_df[watched_movies[i]].sort_values(ascending=False)[:2])
print(ans)
#most 2 similer movies for toy sotry and jumanji as result

